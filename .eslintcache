[{"D:\\Tasks\\mobileshop\\src\\index.js":"1","D:\\Tasks\\mobileshop\\src\\app.js":"2","D:\\Tasks\\mobileshop\\src\\components\\Home.js":"3","D:\\Tasks\\mobileshop\\src\\components\\Table.js":"4","D:\\Tasks\\mobileshop\\src\\components\\BarChart.js":"5","D:\\Tasks\\mobileshop\\src\\components\\PieChart.js":"6","D:\\Tasks\\mobileshop\\src\\components\\Add.js":"7","D:\\Tasks\\mobileshop\\src\\components\\reducers\\mobileReducer.js":"8","D:\\Tasks\\mobileshop\\src\\components\\helpers\\index.js":"9","D:\\Tasks\\mobileshop\\src\\components\\actions\\mobileActions.js":"10"},{"size":368,"mtime":1617708915586,"results":"11","hashOfConfig":"12"},{"size":567,"mtime":1617704266054,"results":"13","hashOfConfig":"12"},{"size":5418,"mtime":1617725259652,"results":"14","hashOfConfig":"12"},{"size":2328,"mtime":1617726247560,"results":"15","hashOfConfig":"12"},{"size":1860,"mtime":1617637071833,"results":"16","hashOfConfig":"12"},{"size":641,"mtime":1617716350982,"results":"17","hashOfConfig":"12"},{"size":8378,"mtime":1617725003861,"results":"18","hashOfConfig":"12"},{"size":1201,"mtime":1617723902216,"results":"19","hashOfConfig":"12"},{"size":1447,"mtime":1617725414710,"results":"20","hashOfConfig":"12"},{"size":106,"mtime":1617723897048,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"195fjvr",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"D:\\Tasks\\mobileshop\\src\\index.js",[],"D:\\Tasks\\mobileshop\\src\\app.js",[],"D:\\Tasks\\mobileshop\\src\\components\\Home.js",["47"],"import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Typography,\r\n  Box,\r\n  Button,\r\n  Select,\r\n  FormControl,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport Table from \"./Table\";\r\nimport BarChart from \"./BarChart\";\r\nimport PieChart from \"./PieChart\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  getModels,\r\n  getMobiles,\r\n  getBarChartData,\r\n  getPieChartData,\r\n} from \"../components/helpers/index\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  Wrapper: {\r\n    width: \"60%\",\r\n  },\r\n  chartsWrapper: {\r\n    width: \"40%\",\r\n    justifyContent: \"center\",\r\n    display: \"flex\",\r\n  },\r\n  Header: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-evenly\",\r\n    width: \"100%\",\r\n  },\r\n  Content: {\r\n    margin: \"20px 15px\",\r\n  },\r\n  SelectField: {\r\n    minWidth: \"200px\",\r\n    marginLeft: \"80px\",\r\n  },\r\n  button: {\r\n    background: \"#53A8E2\",\r\n  },\r\n  typo: {\r\n    color: \"#53A8E2\",\r\n  },\r\n}));\r\n\r\nconst Home = () => {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const { mobiles } = useSelector((state) => state);\r\n\r\n  const [selectedBrand, setSelectedBrand] = useState(\"\");\r\n  const brands = [...new Set(mobiles.map((mobile) => mobile.brand))];\r\n\r\n  const [selectedModel, setSelectedModel] = useState(\"\");\r\n  const [models, setModels] = useState([]);\r\n\r\n  const [tableMobiles, setTableMobiles] = useState(\r\n    getMobiles(mobiles, selectedBrand, selectedModel)\r\n  );\r\n\r\n  useEffect(() => {\r\n    setModels(getModels(mobiles, selectedBrand));\r\n  }, []);\r\n  const barChartData = getBarChartData(mobiles);\r\n  const pieChartData = getPieChartData(mobiles);\r\n\r\n  const handleModelChange = (event) => {\r\n    setSelectedModel(event.target.value);\r\n  };\r\n\r\n  const handleBrandChange = (event) => {\r\n    setSelectedModel(\"\");\r\n    setSelectedBrand(event.target.value);\r\n    const filteredModels = getModels(mobiles, event.target.value);\r\n    setModels(filteredModels);\r\n  };\r\n\r\n  const handleSearchClick = () => {\r\n    setTableMobiles(getMobiles(mobiles, selectedBrand, selectedModel));\r\n  };\r\n\r\n  return (\r\n    <Box display=\"flex\" overflow=\"hidden\" height=\"100vh\">\r\n      <Box className={classes.Wrapper}>\r\n        <Box marginBottom=\"60px\" marginTop=\"20px\" className={classes.Header}>\r\n          <Typography className={classes.typo} variant=\"h4\">\r\n            Mobile Shop Application\r\n          </Typography>\r\n          <Button\r\n            onClick={() => history.push(\"/add\")}\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n          >\r\n            Add New Mobile\r\n          </Button>\r\n        </Box>\r\n\r\n        <Box className={classes.Content}>\r\n          <Box display=\"flex\" alignItems=\"center\">\r\n            <Box>\r\n              <Box display=\"flex\" alignItems=\"center\" marginBottom=\"20px\">\r\n                <Typography variant=\"h6\">Model</Typography>\r\n                <FormControl\r\n                  variant=\"outlined\"\r\n                  className={classes.SelectField}\r\n                  size=\"small\"\r\n                >\r\n                  <Select\r\n                    native\r\n                    value={selectedModel}\r\n                    onChange={handleModelChange}\r\n                  >\r\n                    <option value=\"\">none</option>\r\n                    {models.map((model, index) => (\r\n                      <option key={index} value={model}>\r\n                        {model}\r\n                      </option>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Box>\r\n              <Box display=\"flex\" alignItems=\"center\">\r\n                <Typography variant=\"h6\">Brand</Typography>\r\n                <FormControl\r\n                  variant=\"outlined\"\r\n                  className={classes.SelectField}\r\n                  size=\"small\"\r\n                >\r\n                  <Select\r\n                    native\r\n                    value={selectedBrand}\r\n                    onChange={handleBrandChange}\r\n                  >\r\n                    <option value=\"\">none</option>\r\n                    {[\r\n                      brands.map((brand, index) => (\r\n                        <option key={index} value={brand}>\r\n                          {brand}\r\n                        </option>\r\n                      )),\r\n                    ]}\r\n                  </Select>\r\n                </FormControl>\r\n              </Box>\r\n            </Box>\r\n            <Box marginLeft=\"40px\">\r\n              <Button\r\n                className={classes.button}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={handleSearchClick}\r\n              >\r\n                Search\r\n              </Button>\r\n            </Box>\r\n          </Box>\r\n          <Box marginTop=\"20px\">\r\n            <Table mobiles={tableMobiles} />\r\n          </Box>\r\n          <Box marginTop=\"20px\">\r\n            <Typography>\r\n              {selectedModel && selectedBrand && tableMobiles[0].description}\r\n            </Typography>\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n      <Divider orientation=\"vertical\" flexItem />\r\n      <Box className={classes.chartsWrapper}>\r\n        <Box width=\"60%\" marginTop=\"100px\">\r\n          <BarChart chartData={barChartData} />\r\n          <PieChart chartData={pieChartData} />\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","D:\\Tasks\\mobileshop\\src\\components\\Table.js",["48"],"import React from \"react\";\r\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: \"#53A8E2\",\r\n    color: theme.palette.common.white,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    \"&:nth-of-type(odd)\": {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\n// function createData(Brand, Model, Year) {\r\n//   return { Brand, Model, Year };\r\n// }\r\n\r\n// const rows = [\r\n//   createData(\"Nokia\", \"6600\", 2004),\r\n//   createData(\"Samsung\", \"S6\", 2006),\r\n//   createData(\"Apple\", \"iPhone4\", 2008),\r\n//   createData(\"Sony\", \"Z2\", 2009),\r\n// ];\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 700,\r\n  },\r\n  container: {\r\n    maxHeight: \"322px\",\r\n  },\r\n});\r\n\r\nexport default function CustomizedTables({ mobiles }) {\r\n  const classes = useStyles();\r\n  return (\r\n    <TableContainer className={classes.container} component={Paper}>\r\n      <Table stickyHeader className={classes.table} aria-label=\"customized table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <StyledTableCell>Brand</StyledTableCell>\r\n            <StyledTableCell align=\"right\">Model</StyledTableCell>\r\n            <StyledTableCell align=\"right\">Year</StyledTableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {mobiles.map((mobile, index) => (\r\n            <StyledTableRow key={index}>\r\n              <StyledTableCell component=\"th\" scope=\"row\">\r\n                {mobile.brand}\r\n              </StyledTableCell>\r\n              <StyledTableCell align=\"right\">{mobile.model}</StyledTableCell>\r\n              <StyledTableCell align=\"right\">{mobile.year}</StyledTableCell>\r\n            </StyledTableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n","D:\\Tasks\\mobileshop\\src\\components\\BarChart.js",[],["49","50"],"D:\\Tasks\\mobileshop\\src\\components\\PieChart.js",["51","52"],"import { Box } from \"@material-ui/core\";\r\nimport React, { useEffect } from \"react\";\r\nimport Chart from \"chart.js\";\r\nimport { Pie } from \"react-chartjs-2\";\r\n\r\nconst PieChart = ({ chartData }) => {\r\n  const data = {\r\n    labels: chartData.labels,\r\n    datasets: [\r\n      {\r\n        label: \"My First Dataset\",\r\n        data: chartData.data,\r\n        backgroundColor: [\r\n          \"rgb(255, 99, 132)\",\r\n          \"rgb(54, 162, 235)\",\r\n          \"rgb(255, 205, 86)\",\r\n        ],\r\n        hoverOffset: 4,\r\n      },\r\n    ],\r\n  };\r\n  return (\r\n    <Box marginTop=\"60px\">\r\n      <Pie data={data} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default PieChart;\r\n","D:\\Tasks\\mobileshop\\src\\components\\Add.js",["53","54"],"import React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Typography,\r\n  Box,\r\n  Button,\r\n  Select,\r\n  FormControl,\r\n  TextField,\r\n  Radio,\r\n  RadioGroup,\r\n  FormControlLabel,\r\n  FormLabel,\r\n  Checkbox,\r\n  FormHelperText,\r\n  FormGroup,\r\n} from \"@material-ui/core\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { addPost } from \"./actions/mobileActions\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  label: {\r\n    minWidth: \"160px\",\r\n  },\r\n  form: {\r\n    margin: \"50px 25px\",\r\n  },\r\n  SelectField: {\r\n    width: \"200px\",\r\n    marginLeft: \"80px\",\r\n  },\r\n  options: {\r\n    width: \"500px\",\r\n    height: \"230px\",\r\n    border: \"2px solid black\",\r\n    display: \"flex\",\r\n    padding: \"40px\",\r\n    marginTop: \"20px\",\r\n  },\r\n}));\r\n\r\nconst Add = () => {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n\r\n  const brands = [\"Sony\", \"Samsung\", \"Apple\", \"Nokia\", \"LG\"];\r\n  const memories = [\"16GB\", \"32GB\", \"64GB\", \"128GB\"];\r\n\r\n  const [checkbox, setCheckbox] = useState({\r\n    dualSim: true,\r\n    nfc: false,\r\n    fourG: false,\r\n  });\r\n\r\n  const { dualSim, nfc, fourG } = checkbox;\r\n\r\n  const [screen, setScreen] = useState(\"4\");\r\n\r\n  const [color, setColor] = useState(\"Black\");\r\n\r\n  const [model, setModel] = useState(\"\");\r\n  const [year, setYear] = useState(\"\");\r\n  const [brand, setBrand] = useState(brands[0]);\r\n  const [memory, setMemory] = useState(memories[0]);\r\n\r\n  const isFormValid = () => {\r\n    if (model && year) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    setCheckbox({ ...checkbox, [event.target.name]: event.target.checked });\r\n  };\r\n\r\n  const handleScreenChange = (event) => {\r\n    setScreen(event.target.value);\r\n  };\r\n\r\n  const handleColorChange = (event) => {\r\n    setColor(event.target.value);\r\n  };\r\n\r\n  const handleModelChange = (event) => {\r\n    setModel(event.target.value);\r\n  };\r\n\r\n  const handleYearChange = (event) => {\r\n    setYear(event.target.value);\r\n  };\r\n\r\n  const handleBrandChange = (event) => {\r\n    setBrand(event.target.value);\r\n  };\r\n\r\n  const handleMemoryChange = (event) => {\r\n    setMemory(event.target.value);\r\n  };\r\n\r\n  const submit = () => {\r\n    const mobile = {\r\n      model,\r\n      brand,\r\n      year,\r\n      description: `This is ${model} manfactured on ${year}`,\r\n      dualSim,\r\n      NFC: nfc,\r\n      fourG,\r\n      memory,\r\n      color,\r\n    };\r\n    addPost(dispatch, mobile);\r\n    history.push(\"/\");\r\n  };\r\n\r\n  return (\r\n    <Box display=\"flex\" overflow=\"hidden\" height=\"100vh\">\r\n      <Box className={classes.form}>\r\n        <Box display=\"flex\" alignItems=\"center\" marginBottom=\"20px\">\r\n          <Typography className={classes.label} variant=\"h6\">\r\n            Model\r\n          </Typography>\r\n          <TextField\r\n            error={!model}\r\n            className={classes.SelectField}\r\n            onChange={handleModelChange}\r\n            id=\"outlined-basic\"\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            value={model}\r\n            required\r\n          />\r\n        </Box>\r\n        <Box display=\"flex\" alignItems=\"center\" marginBottom=\"20px\">\r\n          <Typography variant=\"h6\">Manufacture Year</Typography>\r\n          <TextField\r\n            error={!year}\r\n            type=\"number\"\r\n            onChange={handleYearChange}\r\n            className={classes.SelectField}\r\n            id=\"outlined-basic\"\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            value={year}\r\n          />\r\n        </Box>\r\n        <Box display=\"flex\" alignItems=\"center\" marginBottom=\"20px\">\r\n          <Typography className={classes.label} variant=\"h6\">\r\n            Brand\r\n          </Typography>\r\n          <FormControl\r\n            variant=\"outlined\"\r\n            className={classes.SelectField}\r\n            size=\"small\"\r\n          >\r\n            <Select native value={brand} onChange={handleBrandChange}>\r\n              {brands.map((brand, index) => (\r\n                <option key={index} value={brand}>\r\n                  {brand}\r\n                </option>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </Box>\r\n        <Box display=\"flex\" alignItems=\"center\" marginBottom=\"20px\">\r\n          <Typography className={classes.label} variant=\"h6\">\r\n            Memory\r\n          </Typography>\r\n          <FormControl\r\n            variant=\"outlined\"\r\n            className={classes.SelectField}\r\n            size=\"small\"\r\n          >\r\n            <Select native value={memory} onChange={handleMemoryChange}>\r\n              {memories.map((memory, index) => (\r\n                <option key={index} value={memory}>\r\n                  {memory}\r\n                </option>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </Box>\r\n      </Box>\r\n      <Box marginLeft=\"180px\">\r\n        <Box className={classes.options}>\r\n          <Box className={classes.checkbox}>\r\n            <FormControl component=\"fieldset\" className={classes.formControl}>\r\n              <FormGroup>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      checked={dualSim}\r\n                      onChange={handleChange}\r\n                      name=\"dualSim\"\r\n                    />\r\n                  }\r\n                  label=\"Dual Sim\"\r\n                />\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      checked={nfc}\r\n                      onChange={handleChange}\r\n                      name=\"nfc\"\r\n                    />\r\n                  }\r\n                  label=\"NFC\"\r\n                />\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      checked={fourG}\r\n                      onChange={handleChange}\r\n                      name=\"fourG\"\r\n                    />\r\n                  }\r\n                  label=\"4G\"\r\n                />\r\n              </FormGroup>\r\n            </FormControl>\r\n          </Box>\r\n          <Box marginLeft=\"30px\" display=\"flex\">\r\n            <Box paddingTop=\"9px\" marginRight=\"5px\">\r\n              Screen\r\n            </Box>\r\n            <Box>\r\n              <RadioGroup\r\n                aria-label=\"screen\"\r\n                name=\"screen\"\r\n                value={screen}\r\n                onChange={handleScreenChange}\r\n              >\r\n                <FormControlLabel value=\"4\" control={<Radio />} label=\"4\" />\r\n                <FormControlLabel value=\"5\" control={<Radio />} label=\"5\" />\r\n                <FormControlLabel value=\"6\" control={<Radio />} label=\"6\" />\r\n              </RadioGroup>\r\n            </Box>\r\n          </Box>\r\n          <Box marginLeft=\"30px\" display=\"flex\">\r\n            <Box paddingTop=\"9px\" marginRight=\"5px\">\r\n              Color\r\n            </Box>\r\n            <Box>\r\n              <RadioGroup\r\n                aria-label=\"color\"\r\n                name=\"color\"\r\n                value={color}\r\n                onChange={handleColorChange}\r\n              >\r\n                <FormControlLabel\r\n                  value=\"White\"\r\n                  control={<Radio />}\r\n                  label=\"White\"\r\n                />\r\n                <FormControlLabel\r\n                  value=\"Black\"\r\n                  control={<Radio />}\r\n                  label=\"Black\"\r\n                />\r\n                <FormControlLabel\r\n                  value=\"Gold\"\r\n                  control={<Radio />}\r\n                  label=\"Gold\"\r\n                />\r\n              </RadioGroup>\r\n            </Box>\r\n          </Box>\r\n        </Box>\r\n        <Box\r\n          display=\"flex\"\r\n          width=\"500px\"\r\n          justifyContent=\"flex-end\"\r\n          marginTop=\"20px\"\r\n        >\r\n          <Box marginRight=\"20px\">\r\n            <Button\r\n              onClick={() => history.goBack()}\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n            >\r\n              Back\r\n            </Button>\r\n          </Box>\r\n          <Button\r\n            disabled={!isFormValid()}\r\n            onClick={submit}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n          >\r\n            Save\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Add;\r\n","D:\\Tasks\\mobileshop\\src\\components\\reducers\\mobileReducer.js",[],"D:\\Tasks\\mobileshop\\src\\components\\helpers\\index.js",[],"D:\\Tasks\\mobileshop\\src\\components\\actions\\mobileActions.js",[],{"ruleId":"55","severity":1,"message":"56","line":69,"column":6,"nodeType":"57","endLine":69,"endColumn":8,"suggestions":"58"},{"ruleId":"59","severity":1,"message":"60","line":10,"column":10,"nodeType":"61","messageId":"62","endLine":10,"endColumn":21},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"59","severity":1,"message":"67","line":2,"column":17,"nodeType":"61","messageId":"62","endLine":2,"endColumn":26},{"ruleId":"59","severity":1,"message":"68","line":3,"column":8,"nodeType":"61","messageId":"62","endLine":3,"endColumn":13},{"ruleId":"59","severity":1,"message":"69","line":13,"column":3,"nodeType":"61","messageId":"62","endLine":13,"endColumn":12},{"ruleId":"59","severity":1,"message":"70","line":15,"column":3,"nodeType":"61","messageId":"62","endLine":15,"endColumn":17},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'mobiles' and 'selectedBrand'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setModels' needs the current value of 'selectedBrand'.","ArrayExpression",["71"],"no-unused-vars","'useSelector' is defined but never used.","Identifier","unusedVar","no-native-reassign",["72"],"no-negated-in-lhs",["73"],"'useEffect' is defined but never used.","'Chart' is defined but never used.","'FormLabel' is defined but never used.","'FormHelperText' is defined but never used.",{"desc":"74","fix":"75"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [mobiles, selectedBrand]",{"range":"76","text":"77"},[1602,1604],"[mobiles, selectedBrand]"]